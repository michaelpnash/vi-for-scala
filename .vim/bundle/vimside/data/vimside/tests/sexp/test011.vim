"---------------------------
" test type_at_point for String
"    this takes about 8 seconds
"---------------------------

call vimtap#SetOutputFile('test011.tap')
call vimtap#Plan(1)

let file = "type_at_point_string"
let start = reltime()
let sexp = vimside#sexp#ParseFile(file)
" echo "END: ". reltimestr(reltime(start))
let s = vimside#sexp#ToWireString(sexp)

let out = '(:return (:ok (:type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :info-type typeInspect :companion-id 565 :interfaces ((:type (:name "Function1" :type-id 9 :full-name "scala.Function1" :decl-as trait :type-args ((:name "T1" :type-id 7 :full-name "scala.T1") (:name "R" :type-id 8 :full-name "scala.R")) :members ((:name "compose" :type (:name "[A](g: A => Int)A => Char" :type-id 4 :arrow-type t :result-type (:name "Function1" :type-id 6 :full-name "scala.Function1" :decl-as trait :type-args ((:name "A" :type-id 1 :full-name "scala.A") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class))) :param-sections ((:params (("g" (:name "Function1" :type-id 3 :full-name "scala.Function1" :decl-as trait :type-args ((:name "A" :type-id 1 :full-name "scala.A") (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))))) :decl-as method))) :via-view "wrapString") (:type (:name "GenSeqLike" :type-id 29 :full-name "scala.collection.GenSeqLike" :decl-as trait :type-args ((:name "A" :type-id 27 :full-name "scala.collection.A") (:name "Repr" :type-id 28 :full-name "scala.collection.Repr")) :members ((:name "indexOf" :type (:name "[B >: Char](elem: B, from: Int)Int" :type-id 11 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("elem" (:name "B" :type-id 10 :full-name "scala.collection.B")) ("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "indexOf" :type (:name "[B >: Char](elem: B)Int" :type-id 13 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("elem" (:name "B" :type-id 12 :full-name "scala.collection.B")))))) :decl-as method) (:name "indexWhere" :type (:name "(p: Char => Boolean)Int" :type-id 16 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "isDefinedAt" :type (:name "(idx: Int)Boolean" :type-id 17 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("idx" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexOf" :type (:name "[B >: Char](elem: B)Int" :type-id 19 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("elem" (:name "B" :type-id 18 :full-name "scala.collection.B")))))) :decl-as method) (:name "lastIndexOf" :type (:name "[B >: Char](elem: B, end: Int)Int" :type-id 21 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("elem" (:name "B" :type-id 20 :full-name "scala.collection.B")) ("end" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexWhere" :type (:name "(p: Char => Boolean)Int" :type-id 22 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "prefixLength" :type (:name "(p: Char => Boolean)Int" :type-id 23 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "startsWith" :type (:name "[B](that: scala.collection.GenSeq[B])Boolean" :type-id 26 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 25 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 24 :full-name "scala.collection.B")))))))) :decl-as method))) :via-view "augmentString") (:type (:name "StringLike" :type-id 65 :full-name "scala.collection.immutable.StringLike" :decl-as trait :type-args ((:name "Repr" :type-id 64 :full-name "scala.collection.immutable.Repr")) :members ((:name "*" :type (:name "(n: Int)String" :type-id 30 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "capitalize" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "compare" :type (:name "(other: String)Int" :type-id 33 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("other" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "format" :type (:name "(args: Any*)String" :type-id 36 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("args" (:name "<repeated>" :type-id 35 :full-name "scala.<repeated>" :decl-as class :type-args ((:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))))) :decl-as method) (:name "formatLocal" :type (:name "(l: java.util.Locale, args: Any*)String" :type-id 38 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("l" (:name "Locale" :type-id 37 :full-name "java.util.Locale" :decl-as class)) ("args" (:name "<repeated>" :type-id 35 :full-name "scala.<repeated>" :decl-as class :type-args ((:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))))) :decl-as method) (:name "lines" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "linesIterator" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "linesWithSeparators" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "mkString" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "r" :type (:name "(groupNames: String*)scala.util.matching.Regex" :type-id 41 :arrow-type t :result-type (:name "Regex" :type-id 42 :full-name "scala.util.matching.Regex" :decl-as class) :param-sections ((:params (("groupNames" (:name "<repeated>" :type-id 40 :full-name "scala.<repeated>" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))))) :decl-as method) (:name "r" :type (:name "Regex" :type-id 43 :full-name "scala.util.matching.Regex" :decl-as class) :decl-as method) (:name "replaceAllLiterally" :type (:name "(literal: String, replacement: String)String" :type-id 44 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("literal" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)) ("replacement" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "split" :type (:name "(separators: Array[Char])Array[String]" :type-id 46 :arrow-type t :result-type (:name "Array" :type-id 47 :full-name "scala.Array" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("separators" (:name "Array" :type-id 45 :full-name "scala.Array" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))))))) :decl-as method) (:name "split" :type (:name "(separator: Char)Array[String]" :type-id 48 :arrow-type t :result-type (:name "Array" :type-id 47 :full-name "scala.Array" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("separator" (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))))) :decl-as method) (:name "stripLineEnd" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "stripMargin" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "stripMargin" :type (:name "(marginChar: Char)String" :type-id 49 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("marginChar" (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))))) :decl-as method) (:name "stripPrefix" :type (:name "(prefix: String)String" :type-id 50 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("prefix" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "stripSuffix" :type (:name "(suffix: String)String" :type-id 52 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("suffix" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "toArray" :type (:name "[B >: Char](implicit evidence$1: scala.reflect.ClassTag[B])Array[B]" :type-id 55 :arrow-type t :result-type (:name "Array" :type-id 56 :full-name "scala.Array" :decl-as class :type-args ((:name "B" :type-id 53 :full-name "scala.collection.immutable.B"))) :param-sections ((:params (("evidence$1" (:name "ClassTag" :type-id 54 :full-name "scala.reflect.ClassTag" :decl-as class :type-args ((:name "B" :type-id 53 :full-name "scala.collection.immutable.B"))))) :is-implicit t))) :decl-as method) (:name "toBoolean" :type (:name "Boolean" :type-id 57 :full-name "scala.Boolean" :decl-as class) :decl-as method) (:name "toByte" :type (:name "Byte" :type-id 58 :full-name "scala.Byte" :decl-as class) :decl-as method) (:name "toDouble" :type (:name "Double" :type-id 59 :full-name "scala.Double" :decl-as class) :decl-as method) (:name "toFloat" :type (:name "Float" :type-id 60 :full-name "scala.Float" :decl-as class) :decl-as method) (:name "toInt" :type (:name "Int" :type-id 61 :full-name "scala.Int" :decl-as class) :decl-as method) (:name "toLong" :type (:name "Long" :type-id 62 :full-name "scala.Long" :decl-as class) :decl-as method) (:name "toShort" :type (:name "Short" :type-id 63 :full-name "scala.Short" :decl-as class) :decl-as method))) :via-view "augmentString") (:type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class :members ((:name "+" :type (:name "(x$1: Any)String" :type-id 66 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: Int, x$3: Int, x$4: java.nio.charset.Charset)String" :type-id 70 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$4" (:name "Charset" :type-id 69 :full-name "java.nio.charset.Charset" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte])String" :type-id 71 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: Int, x$3: Int)String" :type-id 72 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Char], x$2: Int, x$3: Int)String" :type-id 73 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 45 :full-name "scala.Array" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: Int, x$3: Int, x$4: String)String" :type-id 74 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$4" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: String)String" :type-id 75 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Int], x$2: Int, x$3: Int)String" :type-id 77 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 76 :full-name "scala.Array" :decl-as class :type-args ((:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: Int, x$3: Int, x$4: Int)String" :type-id 78 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$4" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: StringBuilder)String" :type-id 80 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "StringBuilder" :type-id 79 :full-name "java.lang.StringBuilder" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Char])String" :type-id 81 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 45 :full-name "scala.Array" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: String)String" :type-id 82 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: StringBuffer)String" :type-id 84 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "StringBuffer" :type-id 83 :full-name "java.lang.StringBuffer" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: java.nio.charset.Charset)String" :type-id 85 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Charset" :type-id 69 :full-name "java.nio.charset.Charset" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(x$1: Array[Byte], x$2: Int)String" :type-id 86 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "charAt" :type (:name "(x$1: Int)Char" :type-id 88 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "codePointAt" :type (:name "(x$1: Int)Int" :type-id 89 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "codePointBefore" :type (:name "(x$1: Int)Int" :type-id 90 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "codePointCount" :type (:name "(x$1: Int, x$2: Int)Int" :type-id 91 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "compareTo" :type (:name "(x$1: String)Int" :type-id 92 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "compareTo" :type (:name "(x$1: Any)Int" :type-id 93 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "compareToIgnoreCase" :type (:name "(x$1: String)Int" :type-id 94 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "concat" :type (:name "(x$1: String)String" :type-id 95 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "contains" :type (:name "(x$1: CharSequence)Boolean" :type-id 97 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "CharSequence" :type-id 96 :full-name "java.lang.CharSequence" :decl-as trait)))))) :decl-as method) (:name "contentEquals" :type (:name "(x$1: CharSequence)Boolean" :type-id 98 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "CharSequence" :type-id 96 :full-name "java.lang.CharSequence" :decl-as trait)))))) :decl-as method) (:name "contentEquals" :type (:name "(x$1: StringBuffer)Boolean" :type-id 99 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "StringBuffer" :type-id 83 :full-name "java.lang.StringBuffer" :decl-as class)))))) :decl-as method) (:name "endsWith" :type (:name "(x$1: String)Boolean" :type-id 100 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "equals" :type (:name "(x$1: Any)Boolean" :type-id 101 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "equalsIgnoreCase" :type (:name "(x$1: String)Boolean" :type-id 102 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "getBytes" :type (:name "()Array[Byte]" :type-id 103 :arrow-type t :result-type (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class))) :param-sections ((:is-implicit t))) :decl-as method) (:name "getBytes" :type (:name "(x$1: java.nio.charset.Charset)Array[Byte]" :type-id 104 :arrow-type t :result-type (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class))) :param-sections ((:params (("x$1" (:name "Charset" :type-id 69 :full-name "java.nio.charset.Charset" :decl-as class)))))) :decl-as method) (:name "getBytes" :type (:name "(x$1: String)Array[Byte]" :type-id 105 :arrow-type t :result-type (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class))) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "getBytes" :type (:name "(x$1: Int, x$2: Int, x$3: Array[Byte], x$4: Int)Unit" :type-id 106 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Array" :type-id 68 :full-name "scala.Array" :decl-as class :type-args ((:name "Byte" :type-id 67 :full-name "scala.Byte" :decl-as class)))) ("x$4" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "getChars" :type (:name "(x$1: Int, x$2: Int, x$3: Array[Char], x$4: Int)Unit" :type-id 108 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "Array" :type-id 45 :full-name "scala.Array" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))) ("x$4" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "hashCode" :type (:name "()Int" :type-id 109 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "indexOf" :type (:name "(x$1: Int, x$2: Int)Int" :type-id 110 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "indexOf" :type (:name "(x$1: Int)Int" :type-id 111 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "indexOf" :type (:name "(x$1: String, x$2: Int)Int" :type-id 112 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "indexOf" :type (:name "(x$1: String)Int" :type-id 113 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "intern" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "isEmpty" :type (:name "()Boolean" :type-id 114 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "lastIndexOf" :type (:name "(x$1: String, x$2: Int)Int" :type-id 115 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexOf" :type (:name "(x$1: Int)Int" :type-id 116 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexOf" :type (:name "(x$1: Int, x$2: Int)Int" :type-id 117 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexOf" :type (:name "(x$1: String)Int" :type-id 118 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "length" :type (:name "()Int" :type-id 109 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "matches" :type (:name "(x$1: String)Boolean" :type-id 119 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "offsetByCodePoints" :type (:name "(x$1: Int, x$2: Int)Int" :type-id 120 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "regionMatches" :type (:name "(x$1: Boolean, x$2: Int, x$3: String, x$4: Int, x$5: Int)Boolean" :type-id 121 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$3" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$4" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$5" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "regionMatches" :type (:name "(x$1: Int, x$2: String, x$3: Int, x$4: Int)Boolean" :type-id 122 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$3" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$4" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "replace" :type (:name "(x$1: CharSequence, x$2: CharSequence)String" :type-id 123 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "CharSequence" :type-id 96 :full-name "java.lang.CharSequence" :decl-as trait)) ("x$2" (:name "CharSequence" :type-id 96 :full-name "java.lang.CharSequence" :decl-as trait)))))) :decl-as method) (:name "replace" :type (:name "(x$1: Char, x$2: Char)String" :type-id 124 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)) ("x$2" (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class)))))) :decl-as method) (:name "replaceAll" :type (:name "(x$1: String, x$2: String)String" :type-id 125 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "replaceFirst" :type (:name "(x$1: String, x$2: String)String" :type-id 126 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "split" :type (:name "(x$1: String)Array[String]" :type-id 127 :arrow-type t :result-type (:name "Array" :type-id 128 :full-name "scala.Array" :decl-as class :type-args ((:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "split" :type (:name "(x$1: String, x$2: Int)Array[String]" :type-id 129 :arrow-type t :result-type (:name "Array" :type-id 128 :full-name "scala.Array" :decl-as class :type-args ((:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "startsWith" :type (:name "(x$1: String)Boolean" :type-id 130 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "startsWith" :type (:name "(x$1: String, x$2: Int)Boolean" :type-id 131 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "subSequence" :type (:name "(x$1: Int, x$2: Int)CharSequence" :type-id 132 :arrow-type t :result-type (:name "CharSequence" :type-id 96 :full-name "java.lang.CharSequence" :decl-as trait) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "substring" :type (:name "(x$1: Int, x$2: Int)String" :type-id 133 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "substring" :type (:name "(x$1: Int)String" :type-id 134 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "toCharArray" :type (:name "()Array[Char]" :type-id 135 :arrow-type t :result-type (:name "Array" :type-id 45 :full-name "scala.Array" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class))) :param-sections ((:is-implicit t))) :decl-as method) (:name "toLowerCase" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "toLowerCase" :type (:name "(x$1: java.util.Locale)String" :type-id 136 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Locale" :type-id 37 :full-name "java.util.Locale" :decl-as class)))))) :decl-as method) (:name "toString" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "toUpperCase" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "toUpperCase" :type (:name "(x$1: java.util.Locale)String" :type-id 137 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("x$1" (:name "Locale" :type-id 37 :full-name "java.util.Locale" :decl-as class)))))) :decl-as method) (:name "trim" :type (:name "()String" :type-id 87 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method)))) (:type (:name "Parallelizable" :type-id 141 :full-name "scala.collection.Parallelizable" :decl-as trait :type-args ((:name "A" :type-id 139 :full-name "scala.collection.A") (:name "ParRepr" :type-id 140 :full-name "scala.collection.ParRepr")) :members ((:name "par" :type (:name "ParSeq" :type-id 138 :full-name "scala.collection.parallel.ParSeq" :decl-as trait) :decl-as method))) :via-view "augmentString") (:type (:name "GenTraversableOnce" :type-id 146 :full-name "scala.collection.GenTraversableOnce" :decl-as trait :type-args ((:name "A" :type-id 145 :full-name "scala.collection.A")) :members ((:name "/:\\" :type (:name "[A1 >: Char](z: A1)(op: (A1, A1) => A1)A1" :type-id 144 :arrow-type t :result-type (:name "A1" :type-id 142 :full-name "scala.collection.A1") :param-sections ((:params (("z" (:name "A1" :type-id 142 :full-name "scala.collection.A1")))) (:params (("op" (:name "Function2" :type-id 143 :full-name "scala.Function2" :decl-as class :type-args ((:name "A1" :type-id 142 :full-name "scala.collection.A1") (:name "A1" :type-id 142 :full-name "scala.collection.A1") (:name "A1" :type-id 142 :full-name "scala.collection.A1")))))))) :decl-as method))) :via-view "augmentString") (:type (:name "IndexedSeq" :type-id 149 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A" :type-id 148 :full-name "scala.collection.immutable.A")) :members ((:name "companion" :type (:name "GenericCompanion" :type-id 147 :full-name "scala.collection.generic.GenericCompanion" :decl-as class) :decl-as method))) :via-view "wrapString") (:type (:name "TraversableOnce" :type-id 232 :full-name "scala.collection.TraversableOnce" :decl-as trait :type-args ((:name "A" :type-id 231 :full-name "scala.collection.A")) :members ((:name "/:" :type (:name "[B](z: B)(op: (B, Char) => B)B" :type-id 152 :arrow-type t :result-type (:name "B" :type-id 150 :full-name "scala.collection.B") :param-sections ((:params (("z" (:name "B" :type-id 150 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 151 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 150 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 150 :full-name "scala.collection.B")))))))) :decl-as method) (:name ":\\" :type (:name "[B](z: B)(op: (Char, B) => B)B" :type-id 155 :arrow-type t :result-type (:name "B" :type-id 153 :full-name "scala.collection.B") :param-sections ((:params (("z" (:name "B" :type-id 153 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 154 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 153 :full-name "scala.collection.B") (:name "B" :type-id 153 :full-name "scala.collection.B")))))))) :decl-as method) (:name "addString" :type (:name "(b: StringBuilder)StringBuilder" :type-id 157 :arrow-type t :result-type (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class) :param-sections ((:params (("b" (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class)))))) :decl-as method) (:name "addString" :type (:name "(b: StringBuilder, sep: String)StringBuilder" :type-id 158 :arrow-type t :result-type (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class) :param-sections ((:params (("b" (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class)) ("sep" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "addString" :type (:name "(b: StringBuilder, start: String, sep: String, end: String)StringBuilder" :type-id 159 :arrow-type t :result-type (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class) :param-sections ((:params (("b" (:name "StringBuilder" :type-id 156 :full-name "scala.collection.mutable.StringBuilder" :decl-as class)) ("start" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)) ("sep" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)) ("end" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "aggregate" :type (:name "[B](z: B)(seqop: (B, Char) => B, combop: (B, B) => B)B" :type-id 163 :arrow-type t :result-type (:name "B" :type-id 160 :full-name "scala.collection.B") :param-sections ((:params (("z" (:name "B" :type-id 160 :full-name "scala.collection.B")))) (:params (("seqop" (:name "Function2" :type-id 161 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 160 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 160 :full-name "scala.collection.B")))) ("combop" (:name "Function2" :type-id 162 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 160 :full-name "scala.collection.B") (:name "B" :type-id 160 :full-name "scala.collection.B") (:name "B" :type-id 160 :full-name "scala.collection.B")))))))) :decl-as method) (:name "collectFirst" :type (:name "[B](pf: PartialFunction[Char,B])Option[B]" :type-id 166 :arrow-type t :result-type (:name "Option" :type-id 167 :full-name "scala.Option" :decl-as class :type-args ((:name "B" :type-id 164 :full-name "scala.collection.B"))) :param-sections ((:params (("pf" (:name "PartialFunction" :type-id 165 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 164 :full-name "scala.collection.B")))))))) :decl-as method) (:name "copyToArray" :type (:name "[B >: Char](xs: Array[B])Unit" :type-id 170 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("xs" (:name "Array" :type-id 169 :full-name "scala.Array" :decl-as class :type-args ((:name "B" :type-id 168 :full-name "scala.collection.B")))))))) :decl-as method) (:name "copyToArray" :type (:name "[B >: Char](xs: Array[B], start: Int)Unit" :type-id 173 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("xs" (:name "Array" :type-id 172 :full-name "scala.Array" :decl-as class :type-args ((:name "B" :type-id 171 :full-name "scala.collection.B")))) ("start" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "copyToBuffer" :type (:name "[B >: Char](dest: scala.collection.mutable.Buffer[B])Unit" :type-id 176 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("dest" (:name "Buffer" :type-id 175 :full-name "scala.collection.mutable.Buffer" :decl-as trait :type-args ((:name "B" :type-id 174 :full-name "scala.collection.B")))))))) :decl-as method) (:name "count" :type (:name "(p: Char => Boolean)Int" :type-id 177 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "fold" :type (:name "[A1 >: Char](z: A1)(op: (A1, A1) => A1)A1" :type-id 180 :arrow-type t :result-type (:name "A1" :type-id 178 :full-name "scala.collection.A1") :param-sections ((:params (("z" (:name "A1" :type-id 178 :full-name "scala.collection.A1")))) (:params (("op" (:name "Function2" :type-id 179 :full-name "scala.Function2" :decl-as class :type-args ((:name "A1" :type-id 178 :full-name "scala.collection.A1") (:name "A1" :type-id 178 :full-name "scala.collection.A1") (:name "A1" :type-id 178 :full-name "scala.collection.A1")))))))) :decl-as method) (:name "max" :type (:name "[B >: Char](implicit cmp: Ordering[B])Char" :type-id 183 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("cmp" (:name "Ordering" :type-id 182 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 181 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "maxBy" :type (:name "[B](f: Char => B)(implicit cmp: Ordering[B])Char" :type-id 187 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("f" (:name "Function1" :type-id 185 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 184 :full-name "scala.collection.B")))))) (:params (("cmp" (:name "Ordering" :type-id 186 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 184 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "min" :type (:name "[B >: Char](implicit cmp: Ordering[B])Char" :type-id 190 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("cmp" (:name "Ordering" :type-id 189 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 188 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "minBy" :type (:name "[B](f: Char => B)(implicit cmp: Ordering[B])Char" :type-id 194 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("f" (:name "Function1" :type-id 192 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 191 :full-name "scala.collection.B")))))) (:params (("cmp" (:name "Ordering" :type-id 193 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 191 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "mkString" :type (:name "(sep: String)String" :type-id 195 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("sep" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "mkString" :type (:name "(start: String, sep: String, end: String)String" :type-id 196 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("start" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)) ("sep" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)) ("end" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "nonEmpty" :type (:name "Boolean" :type-id 57 :full-name "scala.Boolean" :decl-as class) :decl-as method) (:name "product" :type (:name "[B >: Char](implicit num: Numeric[B])B" :type-id 199 :arrow-type t :result-type (:name "B" :type-id 197 :full-name "scala.collection.B") :param-sections ((:params (("num" (:name "Numeric" :type-id 198 :full-name "scala.math.Numeric" :decl-as class :type-args ((:name "B" :type-id 197 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "reduce" :type (:name "[A1 >: Char](op: (A1, A1) => A1)A1" :type-id 202 :arrow-type t :result-type (:name "A1" :type-id 200 :full-name "scala.collection.A1") :param-sections ((:params (("op" (:name "Function2" :type-id 201 :full-name "scala.Function2" :decl-as class :type-args ((:name "A1" :type-id 200 :full-name "scala.collection.A1") (:name "A1" :type-id 200 :full-name "scala.collection.A1") (:name "A1" :type-id 200 :full-name "scala.collection.A1")))))))) :decl-as method) (:name "reduceLeftOption" :type (:name "[B >: Char](op: (B, Char) => B)Option[B]" :type-id 205 :arrow-type t :result-type (:name "Option" :type-id 206 :full-name "scala.Option" :decl-as class :type-args ((:name "B" :type-id 203 :full-name "scala.collection.B"))) :param-sections ((:params (("op" (:name "Function2" :type-id 204 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 203 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 203 :full-name "scala.collection.B")))))))) :decl-as method) (:name "reduceOption" :type (:name "[A1 >: Char](op: (A1, A1) => A1)Option[A1]" :type-id 209 :arrow-type t :result-type (:name "Option" :type-id 210 :full-name "scala.Option" :decl-as class :type-args ((:name "A1" :type-id 207 :full-name "scala.collection.A1"))) :param-sections ((:params (("op" (:name "Function2" :type-id 208 :full-name "scala.Function2" :decl-as class :type-args ((:name "A1" :type-id 207 :full-name "scala.collection.A1") (:name "A1" :type-id 207 :full-name "scala.collection.A1") (:name "A1" :type-id 207 :full-name "scala.collection.A1")))))))) :decl-as method) (:name "reduceRightOption" :type (:name "[B >: Char](op: (Char, B) => B)Option[B]" :type-id 213 :arrow-type t :result-type (:name "Option" :type-id 214 :full-name "scala.Option" :decl-as class :type-args ((:name "B" :type-id 211 :full-name "scala.collection.B"))) :param-sections ((:params (("op" (:name "Function2" :type-id 212 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 211 :full-name "scala.collection.B") (:name "B" :type-id 211 :full-name "scala.collection.B")))))))) :decl-as method) (:name "sum" :type (:name "[B >: Char](implicit num: Numeric[B])B" :type-id 217 :arrow-type t :result-type (:name "B" :type-id 215 :full-name "scala.collection.B") :param-sections ((:params (("num" (:name "Numeric" :type-id 216 :full-name "scala.math.Numeric" :decl-as class :type-args ((:name "B" :type-id 215 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "toIndexedSeq" :type (:name "IndexedSeq" :type-id 218 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait) :decl-as method) (:name "toList" :type (:name "List" :type-id 219 :full-name "scala.collection.immutable.List" :decl-as class) :decl-as method) (:name "toMap" :type (:name "[T, U](implicit ev: <:<[Char,(T, U)])scala.collection.immutable.Map[T,U]" :type-id 225 :arrow-type t :result-type (:name "Map" :type-id 226 :full-name "scala.collection.immutable.Map" :decl-as class :type-args ((:name "T" :type-id 220 :full-name "scala.collection.T") (:name "U" :type-id 221 :full-name "scala.collection.U"))) :param-sections ((:params (("ev" (:name "<:<" :type-id 224 :full-name "scala.Predef$$<:<" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Tuple2" :type-id 222 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "T" :type-id 220 :full-name "scala.collection.T") (:name "U" :type-id 221 :full-name "scala.collection.U")))) :outer-type-id 223))) :is-implicit t))) :decl-as method) (:name "toSet" :type (:name "[B >: Char]=> scala.collection.immutable.Set[B]" :type-id 227 :arrow-type t :result-type (:name "Set" :type-id 229 :full-name "scala.collection.immutable.Set" :decl-as class :type-args ((:name "B" :type-id 228 :full-name "scala.collection.B")))) :decl-as method) (:name "toVector" :type (:name "Vector" :type-id 230 :full-name "scala.collection.immutable.Vector" :decl-as class) :decl-as method))) :via-view "augmentString") (:type (:name "IndexedSeqLike" :type-id 239 :full-name "scala.collection.IndexedSeqLike" :decl-as trait :type-args ((:name "A" :type-id 237 :full-name "scala.collection.A") (:name "Repr" :type-id 238 :full-name "scala.collection.Repr")) :members ((:name "iterator" :type (:name "Iterator" :type-id 233 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "toBuffer" :type (:name "[A1 >: Char]=> scala.collection.mutable.Buffer[A1]" :type-id 234 :arrow-type t :result-type (:name "Buffer" :type-id 236 :full-name "scala.collection.mutable.Buffer" :decl-as trait :type-args ((:name "A1" :type-id 235 :full-name "scala.collection.A1")))) :decl-as method))) :via-view "augmentString") (:type (:name "Ensuring" :type-id 247 :full-name "scala.Predef$$Ensuring" :decl-as class :type-args ((:name "A" :type-id 246 :full-name "scala.A")) :members ((:name "__resultOfEnsuring" :type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :decl-as field) (:name "ensuring" :type (:name "(cond: String => Boolean, msg: => Any)String" :type-id 242 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("cond" (:name "Function1" :type-id 240 :full-name "scala.Function1" :decl-as trait :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))) ("msg" (:name "<byname>" :type-id 241 :full-name "scala.<byname>" :decl-as class :type-args ((:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))))) :decl-as method) (:name "ensuring" :type (:name "(cond: String => Boolean)String" :type-id 243 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("cond" (:name "Function1" :type-id 240 :full-name "scala.Function1" :decl-as trait :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "ensuring" :type (:name "(cond: Boolean, msg: => Any)String" :type-id 244 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("cond" (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)) ("msg" (:name "<byname>" :type-id 241 :full-name "scala.<byname>" :decl-as class :type-args ((:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))))) :decl-as method) (:name "ensuring" :type (:name "(cond: Boolean)String" :type-id 245 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("cond" (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))) :decl-as method) (:name "x" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method)) :outer-type-id 223) :via-view "any2Ensuring") (:type (:name "SeqLike" :type-id 321 :full-name "scala.collection.SeqLike" :decl-as trait :type-args ((:name "A" :type-id 323 :full-name "scala.collection.A") (:name "Repr" :type-id 324 :full-name "scala.collection.Repr")) :members ((:name "+:" :type (:name "[B >: Char, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 252 :arrow-type t :result-type (:name "That" :type-id 250 :full-name "scala.collection.That") :param-sections ((:params (("elem" (:name "B" :type-id 248 :full-name "scala.collection.B")))) (:params (("bf" (:name "CanBuildFrom" :type-id 251 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 248 :full-name "scala.collection.B") (:name "That" :type-id 250 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name ":+" :type (:name "[B >: Char, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 256 :arrow-type t :result-type (:name "That" :type-id 254 :full-name "scala.collection.That") :param-sections ((:params (("elem" (:name "B" :type-id 253 :full-name "scala.collection.B")))) (:params (("bf" (:name "CanBuildFrom" :type-id 255 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 253 :full-name "scala.collection.B") (:name "That" :type-id 254 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "combinations" :type (:name "(n: Int)Iterator[String]" :type-id 257 :arrow-type t :result-type (:name "Iterator" :type-id 258 :full-name "scala.collection.Iterator" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "contains" :type (:name "(elem: Any)Boolean" :type-id 259 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("elem" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "containsSlice" :type (:name "[B](that: scala.collection.GenSeq[B])Boolean" :type-id 262 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 261 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 260 :full-name "scala.collection.B")))))))) :decl-as method) (:name "corresponds" :type (:name "[B](that: scala.collection.GenSeq[B])(p: (Char, B) => Boolean)Boolean" :type-id 266 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 264 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 263 :full-name "scala.collection.B")))))) (:params (("p" (:name "Function2" :type-id 265 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 263 :full-name "scala.collection.B") (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "diff" :type (:name "[B >: Char](that: scala.collection.GenSeq[B])String" :type-id 269 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 268 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 267 :full-name "scala.collection.B")))))))) :decl-as method) (:name "distinct" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "indexOfSlice" :type (:name "[B >: Char](that: scala.collection.GenSeq[B], from: Int)Int" :type-id 272 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 271 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 270 :full-name "scala.collection.B")))) ("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "indexOfSlice" :type (:name "[B >: Char](that: scala.collection.GenSeq[B])Int" :type-id 275 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 274 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 273 :full-name "scala.collection.B")))))))) :decl-as method) (:name "indices" :type (:name "Range" :type-id 276 :full-name "scala.collection.immutable.Range" :decl-as class) :decl-as method) (:name "intersect" :type (:name "[B >: Char](that: scala.collection.GenSeq[B])String" :type-id 279 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 278 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 277 :full-name "scala.collection.B")))))))) :decl-as method) (:name "lastIndexOfSlice" :type (:name "[B >: Char](that: scala.collection.GenSeq[B], end: Int)Int" :type-id 282 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 281 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 280 :full-name "scala.collection.B")))) ("end" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lastIndexOfSlice" :type (:name "[B >: Char](that: scala.collection.GenSeq[B])Int" :type-id 285 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 284 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 283 :full-name "scala.collection.B")))))))) :decl-as method) (:name "padTo" :type (:name "[B >: Char, That](len: Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 289 :arrow-type t :result-type (:name "That" :type-id 287 :full-name "scala.collection.That") :param-sections ((:params (("len" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("elem" (:name "B" :type-id 286 :full-name "scala.collection.B")))) (:params (("bf" (:name "CanBuildFrom" :type-id 288 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 286 :full-name "scala.collection.B") (:name "That" :type-id 287 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "patch" :type (:name "[B >: Char, That](from: Int, patch: scala.collection.GenSeq[B], replaced: Int)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 294 :arrow-type t :result-type (:name "That" :type-id 292 :full-name "scala.collection.That") :param-sections ((:params (("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("patch" (:name "GenSeq" :type-id 291 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 290 :full-name "scala.collection.B")))) ("replaced" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))) (:params (("bf" (:name "CanBuildFrom" :type-id 293 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 290 :full-name "scala.collection.B") (:name "That" :type-id 292 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "permutations" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "reverseMap" :type (:name "[B, That](f: Char => B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 299 :arrow-type t :result-type (:name "That" :type-id 297 :full-name "scala.collection.That") :param-sections ((:params (("f" (:name "Function1" :type-id 296 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 295 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 298 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 295 :full-name "scala.collection.B") (:name "That" :type-id 297 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "size" :type (:name "Int" :type-id 61 :full-name "scala.Int" :decl-as class) :decl-as method) (:name "sortBy" :type (:name "[B](f: Char => B)(implicit ord: scala.math.Ordering[B])String" :type-id 303 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("f" (:name "Function1" :type-id 301 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 300 :full-name "scala.collection.B")))))) (:params (("ord" (:name "Ordering" :type-id 302 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 300 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "sortWith" :type (:name "(lt: (Char, Char) => Boolean)String" :type-id 305 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("lt" (:name "Function2" :type-id 304 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "sorted" :type (:name "[B >: Char](implicit ord: scala.math.Ordering[B])String" :type-id 308 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("ord" (:name "Ordering" :type-id 307 :full-name "scala.math.Ordering" :decl-as class :type-args ((:name "B" :type-id 306 :full-name "scala.collection.B"))))) :is-implicit t))) :decl-as method) (:name "toSeq" :type (:name "Seq" :type-id 309 :full-name "scala.collection.Seq" :decl-as trait) :decl-as method) (:name "union" :type (:name "[B >: Char, That](that: scala.collection.GenSeq[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 314 :arrow-type t :result-type (:name "That" :type-id 312 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "GenSeq" :type-id 311 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 310 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 313 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 310 :full-name "scala.collection.B") (:name "That" :type-id 312 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "updated" :type (:name "[B >: Char, That](index: Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 318 :arrow-type t :result-type (:name "That" :type-id 316 :full-name "scala.collection.That") :param-sections ((:params (("index" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("elem" (:name "B" :type-id 315 :full-name "scala.collection.B")))) (:params (("bf" (:name "CanBuildFrom" :type-id 317 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 315 :full-name "scala.collection.B") (:name "That" :type-id 316 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "view" :type (:name "(from: Int, until: Int)scala.collection.SeqView[Char,String]" :type-id 319 :arrow-type t :result-type (:name "SeqView" :type-id 320 :full-name "scala.collection.SeqView" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("until" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "view" :type (:name "<refinement>" :type-id 322 :full-name "scala.collection.SeqLike$<refinement>" :decl-as class :outer-type-id 321) :decl-as method)))) (:type (:name "IndexedSeqOptimized" :type-id 384 :full-name "scala.collection.IndexedSeqOptimized" :decl-as trait :type-args ((:name "A" :type-id 382 :full-name "scala.collection.A") (:name "Repr" :type-id 383 :full-name "scala.collection.Repr")) :members ((:name "copyToArray" :type (:name "[B >: Char](xs: Array[B], start: Int, len: Int)Unit" :type-id 327 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("xs" (:name "Array" :type-id 326 :full-name "scala.Array" :decl-as class :type-args ((:name "B" :type-id 325 :full-name "scala.collection.B")))) ("start" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("len" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "drop" :type (:name "(n: Int)String" :type-id 328 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "dropRight" :type (:name "(n: Int)String" :type-id 329 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "dropWhile" :type (:name "(p: Char => Boolean)String" :type-id 330 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "endsWith" :type (:name "[B](that: scala.collection.GenSeq[B])Boolean" :type-id 333 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 332 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 331 :full-name "scala.collection.B")))))))) :decl-as method) (:name "exists" :type (:name "(p: Char => Boolean)Boolean" :type-id 334 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "find" :type (:name "(p: Char => Boolean)Option[Char]" :type-id 335 :arrow-type t :result-type (:name "Option" :type-id 336 :full-name "scala.Option" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class))) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "foldLeft" :type (:name "[B](z: B)(op: (B, Char) => B)B" :type-id 339 :arrow-type t :result-type (:name "B" :type-id 337 :full-name "scala.collection.B") :param-sections ((:params (("z" (:name "B" :type-id 337 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 338 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 337 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 337 :full-name "scala.collection.B")))))))) :decl-as method) (:name "foldRight" :type (:name "[B](z: B)(op: (Char, B) => B)B" :type-id 342 :arrow-type t :result-type (:name "B" :type-id 340 :full-name "scala.collection.B") :param-sections ((:params (("z" (:name "B" :type-id 340 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 341 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 340 :full-name "scala.collection.B") (:name "B" :type-id 340 :full-name "scala.collection.B")))))))) :decl-as method) (:name "forall" :type (:name "(p: Char => Boolean)Boolean" :type-id 343 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "foreach" :type (:name "[U](f: Char => U)Unit" :type-id 346 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("f" (:name "Function1" :type-id 345 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "U" :type-id 344 :full-name "scala.collection.U")))))))) :decl-as method) (:name "head" :type (:name "Char" :type-id 347 :full-name "scala.Char" :decl-as class) :decl-as method) (:name "indexWhere" :type (:name "(p: Char => Boolean, from: Int)Int" :type-id 348 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))) ("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "init" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "last" :type (:name "Char" :type-id 347 :full-name "scala.Char" :decl-as class) :decl-as method) (:name "lastIndexWhere" :type (:name "(p: Char => Boolean, end: Int)Int" :type-id 349 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))) ("end" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "lengthCompare" :type (:name "(len: Int)Int" :type-id 350 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("len" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "reduceLeft" :type (:name "[B >: Char](op: (B, Char) => B)B" :type-id 353 :arrow-type t :result-type (:name "B" :type-id 351 :full-name "scala.collection.B") :param-sections ((:params (("op" (:name "Function2" :type-id 352 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 351 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 351 :full-name "scala.collection.B")))))))) :decl-as method) (:name "reduceRight" :type (:name "[B >: Char](op: (Char, B) => B)B" :type-id 356 :arrow-type t :result-type (:name "B" :type-id 354 :full-name "scala.collection.B") :param-sections ((:params (("op" (:name "Function2" :type-id 355 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 354 :full-name "scala.collection.B") (:name "B" :type-id 354 :full-name "scala.collection.B")))))))) :decl-as method) (:name "reverse" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "reverseIterator" :type (:name "Iterator" :type-id 233 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "sameElements" :type (:name "[B >: Char](that: scala.collection.GenIterable[B])Boolean" :type-id 359 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenIterable" :type-id 358 :full-name "scala.collection.GenIterable" :decl-as trait :type-args ((:name "B" :type-id 357 :full-name "scala.collection.B")))))))) :decl-as method) (:name "segmentLength" :type (:name "(p: Char => Boolean, from: Int)Int" :type-id 360 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))) ("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "span" :type (:name "(p: Char => Boolean)(String, String)" :type-id 361 :arrow-type t :result-type (:name "Tuple2" :type-id 362 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "splitAt" :type (:name "(n: Int)(String, String)" :type-id 363 :arrow-type t :result-type (:name "Tuple2" :type-id 362 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "startsWith" :type (:name "[B](that: scala.collection.GenSeq[B], offset: Int)Boolean" :type-id 366 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "GenSeq" :type-id 365 :full-name "scala.collection.GenSeq" :decl-as trait :type-args ((:name "B" :type-id 364 :full-name "scala.collection.B")))) ("offset" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "tail" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "take" :type (:name "(n: Int)String" :type-id 367 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "takeRight" :type (:name "(n: Int)String" :type-id 368 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("n" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "takeWhile" :type (:name "(p: Char => Boolean)String" :type-id 369 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "zip" :type (:name "[A1 >: Char, B, That](that: scala.collection.GenIterable[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,(A1, B),That])That" :type-id 376 :arrow-type t :result-type (:name "That" :type-id 374 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "GenIterable" :type-id 371 :full-name "scala.collection.GenIterable" :decl-as trait :type-args ((:name "B" :type-id 370 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 375 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "Tuple2" :type-id 373 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "A1" :type-id 372 :full-name "scala.collection.A1") (:name "B" :type-id 370 :full-name "scala.collection.B"))) (:name "That" :type-id 374 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "zipWithIndex" :type (:name "[A1 >: Char, That](implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,(A1, Int),That])That" :type-id 381 :arrow-type t :result-type (:name "That" :type-id 379 :full-name "scala.collection.That") :param-sections ((:params (("bf" (:name "CanBuildFrom" :type-id 380 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "Tuple2" :type-id 378 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "A1" :type-id 377 :full-name "scala.collection.A1") (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class))) (:name "That" :type-id 379 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method)))) (:type (:name "StringOps" :type-id 388 :full-name "scala.collection.immutable.StringOps" :decl-as class :members ((:name "repr" :type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :decl-as field) (:name "apply" :type (:name "(index: Int)Char" :type-id 385 :arrow-type t :result-type (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) :param-sections ((:params (("index" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "seq" :type (:name "WrappedString" :type-id 386 :full-name "scala.collection.immutable.WrappedString" :decl-as class) :decl-as method) (:name "slice" :type (:name "(from: Int, until: Int)String" :type-id 387 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("from" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("until" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method))) :via-view "augmentString") (:type (:name "Ordered" :type-id 394 :full-name "scala.math.Ordered" :decl-as trait :type-args ((:name "A" :type-id 393 :full-name "scala.math.A")) :members ((:name "<" :type (:name "(that: String)Boolean" :type-id 389 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "<=" :type (:name "(that: String)Boolean" :type-id 390 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name ">" :type (:name "(that: String)Boolean" :type-id 391 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name ">=" :type (:name "(that: String)Boolean" :type-id 392 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method))) :via-view "augmentString") (:type (:name "ArrowAssoc" :type-id 402 :full-name "scala.Predef$$ArrowAssoc" :decl-as class :type-args ((:name "A" :type-id 401 :full-name "scala.A")) :members ((:name "__leftOfArrow" :type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :decl-as field) (:name "->" :type (:name "[B](y: B)(String, B)" :type-id 396 :arrow-type t :result-type (:name "Tuple2" :type-id 397 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "B" :type-id 395 :full-name "scala.B"))) :param-sections ((:params (("y" (:name "B" :type-id 395 :full-name "scala.B")))))) :decl-as method) (:name "→" :type (:name "[B](y: B)(String, B)" :type-id 399 :arrow-type t :result-type (:name "Tuple2" :type-id 400 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "B" :type-id 398 :full-name "scala.B"))) :param-sections ((:params (("y" (:name "B" :type-id 398 :full-name "scala.B")))))) :decl-as method)) :outer-type-id 223) :via-view "any2ArrowAssoc") (:type (:name "GenericTraversableTemplate" :type-id 438 :full-name "scala.collection.generic.GenericTraversableTemplate" :decl-as trait :type-args ((:name "A" :type-id 436 :full-name "scala.collection.generic.A") (:name "CC" :type-id 437 :full-name "scala.collection.generic.CC")) :members ((:name "flatten" :type (:name "[B](implicit asTraversable: Char => scala.collection.GenTraversableOnce[B])scala.collection.immutable.IndexedSeq[B]" :type-id 406 :arrow-type t :result-type (:name "IndexedSeq" :type-id 407 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "B" :type-id 403 :full-name "scala.collection.generic.B"))) :param-sections ((:params (("asTraversable" (:name "Function1" :type-id 405 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "GenTraversableOnce" :type-id 404 :full-name "scala.collection.GenTraversableOnce" :decl-as trait :type-args ((:name "B" :type-id 403 :full-name "scala.collection.generic.B"))))))) :is-implicit t))) :decl-as method) (:name "genericBuilder" :type (:name "[B]=> scala.collection.mutable.Builder[B,scala.collection.immutable.IndexedSeq[B]]" :type-id 408 :arrow-type t :result-type (:name "Builder" :type-id 411 :full-name "scala.collection.mutable.Builder" :decl-as trait :type-args ((:name "B" :type-id 409 :full-name "scala.collection.generic.B") (:name "IndexedSeq" :type-id 410 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "B" :type-id 409 :full-name "scala.collection.generic.B")))))) :decl-as method) (:name "transpose" :type (:name "[B](implicit asTraversable: Char => scala.collection.GenTraversableOnce[B])scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[B]]" :type-id 415 :arrow-type t :result-type (:name "IndexedSeq" :type-id 417 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "IndexedSeq" :type-id 416 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "B" :type-id 412 :full-name "scala.collection.generic.B"))))) :param-sections ((:params (("asTraversable" (:name "Function1" :type-id 414 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "GenTraversableOnce" :type-id 413 :full-name "scala.collection.GenTraversableOnce" :decl-as trait :type-args ((:name "B" :type-id 412 :full-name "scala.collection.generic.B"))))))) :is-implicit t))) :decl-as method) (:name "unzip" :type (:name "[A1, A2](implicit asPair: Char => (A1, A2))(scala.collection.immutable.IndexedSeq[A1], scala.collection.immutable.IndexedSeq[A2])" :type-id 422 :arrow-type t :result-type (:name "Tuple2" :type-id 425 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "IndexedSeq" :type-id 423 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A1" :type-id 418 :full-name "scala.collection.generic.A1"))) (:name "IndexedSeq" :type-id 424 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A2" :type-id 419 :full-name "scala.collection.generic.A2"))))) :param-sections ((:params (("asPair" (:name "Function1" :type-id 421 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Tuple2" :type-id 420 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "A1" :type-id 418 :full-name "scala.collection.generic.A1") (:name "A2" :type-id 419 :full-name "scala.collection.generic.A2"))))))) :is-implicit t))) :decl-as method) (:name "unzip3" :type (:name "[A1, A2, A3](implicit asTriple: Char => (A1, A2, A3))(scala.collection.immutable.IndexedSeq[A1], scala.collection.immutable.IndexedSeq[A2], scala.collection.immutable.IndexedSeq[A3])" :type-id 431 :arrow-type t :result-type (:name "Tuple3" :type-id 435 :full-name "scala.Tuple3" :decl-as class :type-args ((:name "IndexedSeq" :type-id 432 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A1" :type-id 426 :full-name "scala.collection.generic.A1"))) (:name "IndexedSeq" :type-id 433 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A2" :type-id 427 :full-name "scala.collection.generic.A2"))) (:name "IndexedSeq" :type-id 434 :full-name "scala.collection.immutable.IndexedSeq" :decl-as trait :type-args ((:name "A3" :type-id 428 :full-name "scala.collection.generic.A3"))))) :param-sections ((:params (("asTriple" (:name "Function1" :type-id 430 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Tuple3" :type-id 429 :full-name "scala.Tuple3" :decl-as class :type-args ((:name "A1" :type-id 426 :full-name "scala.collection.generic.A1") (:name "A2" :type-id 427 :full-name "scala.collection.generic.A2") (:name "A3" :type-id 428 :full-name "scala.collection.generic.A3"))))))) :is-implicit t))) :decl-as method))) :via-view "wrapString") (:type (:name "Object" :type-id 453 :full-name "java.lang.Object" :decl-as class :members ((:name "!=" :type (:name "(x$1: AnyRef)Boolean" :type-id 440 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Object" :type-id 439 :full-name "java.lang.Object" :decl-as class)))))) :decl-as method) (:name "##" :type (:name "()Int" :type-id 109 :arrow-type t :result-type (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "==" :type (:name "(x$1: AnyRef)Boolean" :type-id 441 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Object" :type-id 439 :full-name "java.lang.Object" :decl-as class)))))) :decl-as method) (:name "eq" :type (:name "(x$1: AnyRef)Boolean" :type-id 442 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Object" :type-id 439 :full-name "java.lang.Object" :decl-as class)))))) :decl-as method) (:name "getClass" :type (:name "()Class[_]" :type-id 443 :arrow-type t :result-type (:name "Class" :type-id 445 :full-name "java.lang.Class" :decl-as class :type-args ((:name "?0" :type-id 444 :full-name "java.lang.?0"))) :param-sections ((:is-implicit t))) :decl-as method) (:name "ne" :type (:name "(x$1: AnyRef)Boolean" :type-id 446 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Object" :type-id 439 :full-name "java.lang.Object" :decl-as class)))))) :decl-as method) (:name "notify" :type (:name "()Unit" :type-id 447 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "notifyAll" :type (:name "()Unit" :type-id 447 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "synchronized" :type (:name "[T0](x$1: T0)T0" :type-id 449 :arrow-type t :result-type (:name "T0" :type-id 448 :full-name "java.lang.T0") :param-sections ((:params (("x$1" (:name "T0" :type-id 448 :full-name "java.lang.T0")))))) :decl-as method) (:name "wait" :type (:name "()Unit" :type-id 447 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:is-implicit t))) :decl-as method) (:name "wait" :type (:name "(x$1: Long, x$2: Int)Unit" :type-id 451 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("x$1" (:name "Long" :type-id 450 :full-name "scala.Long" :decl-as class)) ("x$2" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "wait" :type (:name "(x$1: Long)Unit" :type-id 452 :arrow-type t :result-type (:name "Unit" :type-id 107 :full-name "scala.Unit" :decl-as class) :param-sections ((:params (("x$1" (:name "Long" :type-id 450 :full-name "scala.Long" :decl-as class)))))) :decl-as method)))) (:type (:name "StringFormat" :type-id 455 :full-name "scala.runtime.StringFormat" :decl-as class :members ((:name "formatted" :type (:name "(fmtstr: String)String" :type-id 454 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("fmtstr" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method))) :via-view "any2stringfmt") (:type (:name "TraversableLike" :type-id 471 :full-name "scala.collection.TraversableLike" :decl-as trait :type-args ((:name "A" :type-id 519 :full-name "scala.collection.A") (:name "Repr" :type-id 520 :full-name "scala.collection.Repr")) :members ((:name "WithFilter" :type (:name "WithFilter" :type-id 472 :full-name "scala.collection.TraversableLike$WithFilter" :decl-as class :outer-type-id 471) :decl-as class) (:name "++" :type (:name "[B >: Char, That](that: scala.collection.GenTraversableOnce[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 460 :arrow-type t :result-type (:name "That" :type-id 458 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "GenTraversableOnce" :type-id 457 :full-name "scala.collection.GenTraversableOnce" :decl-as trait :type-args ((:name "B" :type-id 456 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 459 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 456 :full-name "scala.collection.B") (:name "That" :type-id 458 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "++:" :type (:name "[B >: Char, That](that: Traversable[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 465 :arrow-type t :result-type (:name "That" :type-id 463 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "Traversable" :type-id 462 :full-name "scala.collection.Traversable" :decl-as trait :type-args ((:name "B" :type-id 461 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 464 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 461 :full-name "scala.collection.B") (:name "That" :type-id 463 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "++:" :type (:name "[B >: Char, That](that: scala.collection.TraversableOnce[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 470 :arrow-type t :result-type (:name "That" :type-id 468 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "TraversableOnce" :type-id 467 :full-name "scala.collection.TraversableOnce" :decl-as trait :type-args ((:name "B" :type-id 466 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 469 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 466 :full-name "scala.collection.B") (:name "That" :type-id 468 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "collect" :type (:name "[B, That](pf: PartialFunction[Char,B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 477 :arrow-type t :result-type (:name "That" :type-id 475 :full-name "scala.collection.That") :param-sections ((:params (("pf" (:name "PartialFunction" :type-id 474 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 473 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 476 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 473 :full-name "scala.collection.B") (:name "That" :type-id 475 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "filter" :type (:name "(p: Char => Boolean)String" :type-id 478 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "filterNot" :type (:name "(p: Char => Boolean)String" :type-id 479 :arrow-type t :result-type (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "flatMap" :type (:name "[B, That](f: Char => scala.collection.GenTraversableOnce[B])(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 485 :arrow-type t :result-type (:name "That" :type-id 483 :full-name "scala.collection.That") :param-sections ((:params (("f" (:name "Function1" :type-id 482 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "GenTraversableOnce" :type-id 481 :full-name "scala.collection.GenTraversableOnce" :decl-as trait :type-args ((:name "B" :type-id 480 :full-name "scala.collection.B")))))))) (:params (("bf" (:name "CanBuildFrom" :type-id 484 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 480 :full-name "scala.collection.B") (:name "That" :type-id 483 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "groupBy" :type (:name "[K](f: Char => K)scala.collection.immutable.Map[K,String]" :type-id 488 :arrow-type t :result-type (:name "Map" :type-id 489 :full-name "scala.collection.immutable.Map" :decl-as class :type-args ((:name "K" :type-id 486 :full-name "scala.collection.K") (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("f" (:name "Function1" :type-id 487 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "K" :type-id 486 :full-name "scala.collection.K")))))))) :decl-as method) (:name "hasDefiniteSize" :type (:name "Boolean" :type-id 57 :full-name "scala.Boolean" :decl-as class) :decl-as method) (:name "headOption" :type (:name "Option" :type-id 490 :full-name "scala.Option" :decl-as class) :decl-as method) (:name "inits" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "isTraversableAgain" :type (:name "Boolean" :type-id 57 :full-name "scala.Boolean" :decl-as class) :decl-as method) (:name "lastOption" :type (:name "Option" :type-id 490 :full-name "scala.Option" :decl-as class) :decl-as method) (:name "map" :type (:name "[B, That](f: Char => B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 495 :arrow-type t :result-type (:name "That" :type-id 493 :full-name "scala.collection.That") :param-sections ((:params (("f" (:name "Function1" :type-id 492 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 491 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 494 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 491 :full-name "scala.collection.B") (:name "That" :type-id 493 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "partition" :type (:name "(p: Char => Boolean)(String, String)" :type-id 496 :arrow-type t :result-type (:name "Tuple2" :type-id 362 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class) (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method) (:name "repr" :type (:name "WrappedString" :type-id 386 :full-name "scala.collection.immutable.WrappedString" :decl-as class) :decl-as method) (:name "scan" :type (:name "[B >: Char, That](z: B)(op: (B, B) => B)(implicit cbf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 501 :arrow-type t :result-type (:name "That" :type-id 499 :full-name "scala.collection.That") :param-sections ((:params (("z" (:name "B" :type-id 497 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 498 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 497 :full-name "scala.collection.B") (:name "B" :type-id 497 :full-name "scala.collection.B") (:name "B" :type-id 497 :full-name "scala.collection.B")))))) (:params (("cbf" (:name "CanBuildFrom" :type-id 500 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 497 :full-name "scala.collection.B") (:name "That" :type-id 499 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "scanLeft" :type (:name "[B, That](z: B)(op: (B, Char) => B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 506 :arrow-type t :result-type (:name "That" :type-id 504 :full-name "scala.collection.That") :param-sections ((:params (("z" (:name "B" :type-id 502 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 503 :full-name "scala.Function2" :decl-as class :type-args ((:name "B" :type-id 502 :full-name "scala.collection.B") (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 502 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 505 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 502 :full-name "scala.collection.B") (:name "That" :type-id 504 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "scanRight" :type (:name "[B, That](z: B)(op: (Char, B) => B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,B,That])That" :type-id 511 :arrow-type t :result-type (:name "That" :type-id 509 :full-name "scala.collection.That") :param-sections ((:params (("z" (:name "B" :type-id 507 :full-name "scala.collection.B")))) (:params (("op" (:name "Function2" :type-id 508 :full-name "scala.Function2" :decl-as class :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "B" :type-id 507 :full-name "scala.collection.B") (:name "B" :type-id 507 :full-name "scala.collection.B")))))) (:params (("bf" (:name "CanBuildFrom" :type-id 510 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "B" :type-id 507 :full-name "scala.collection.B") (:name "That" :type-id 509 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method) (:name "stringPrefix" :type (:name "String" :type-id 32 :full-name "java.lang.String" :decl-as class) :decl-as method) (:name "tails" :type (:name "Iterator" :type-id 39 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "to" :type (:name "[Col[_]](implicit cbf: scala.collection.generic.CanBuildFrom[Nothing,Char,Col[Char]])Col[Char]" :type-id 515 :arrow-type t :result-type (:name "Col" :type-id 513 :full-name "scala.collection.Col" :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class))) :param-sections ((:params (("cbf" (:name "CanBuildFrom" :type-id 514 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "Nothing" :type-id 512 :full-name "scala.Nothing" :decl-as class) (:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Col" :type-id 513 :full-name "scala.collection.Col" :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class))))))) :is-implicit t))) :decl-as method) (:name "toTraversable" :type (:name "Traversable" :type-id 516 :full-name "scala.collection.Traversable" :decl-as trait) :decl-as method) (:name "withFilter" :type (:name "(p: Char => Boolean)scala.collection.generic.FilterMonadic[Char,String]" :type-id 517 :arrow-type t :result-type (:name "FilterMonadic" :type-id 518 :full-name "scala.collection.generic.FilterMonadic" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("p" (:name "Function1" :type-id 15 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)))))))) :decl-as method)))) (:type (:name "IterableLike" :type-id 536 :full-name "scala.collection.IterableLike" :decl-as trait :type-args ((:name "A" :type-id 534 :full-name "scala.collection.A") (:name "Repr" :type-id 535 :full-name "scala.collection.Repr")) :members ((:name "canEqual" :type (:name "(that: Any)Boolean" :type-id 521 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("that" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "grouped" :type (:name "(size: Int)Iterator[String]" :type-id 522 :arrow-type t :result-type (:name "Iterator" :type-id 258 :full-name "scala.collection.Iterator" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("size" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "sliding" :type (:name "(size: Int, step: Int)Iterator[String]" :type-id 523 :arrow-type t :result-type (:name "Iterator" :type-id 258 :full-name "scala.collection.Iterator" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("size" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)) ("step" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "sliding" :type (:name "(size: Int)Iterator[String]" :type-id 524 :arrow-type t :result-type (:name "Iterator" :type-id 258 :full-name "scala.collection.Iterator" :decl-as class :type-args ((:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class))) :param-sections ((:params (("size" (:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class)))))) :decl-as method) (:name "toIterable" :type (:name "Iterable" :type-id 525 :full-name "scala.collection.Iterable" :decl-as trait) :decl-as method) (:name "toIterator" :type (:name "Iterator" :type-id 233 :full-name "scala.collection.Iterator" :decl-as class) :decl-as method) (:name "toStream" :type (:name "Stream" :type-id 526 :full-name "scala.collection.immutable.Stream" :decl-as class) :decl-as method) (:name "zipAll" :type (:name "[B, A1 >: Char, That](that: scala.collection.GenIterable[B], thisElem: A1, thatElem: B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.WrappedString,(A1, B),That])That" :type-id 533 :arrow-type t :result-type (:name "That" :type-id 531 :full-name "scala.collection.That") :param-sections ((:params (("that" (:name "GenIterable" :type-id 528 :full-name "scala.collection.GenIterable" :decl-as trait :type-args ((:name "B" :type-id 527 :full-name "scala.collection.B")))) ("thisElem" (:name "A1" :type-id 529 :full-name "scala.collection.A1")) ("thatElem" (:name "B" :type-id 527 :full-name "scala.collection.B")))) (:params (("bf" (:name "CanBuildFrom" :type-id 532 :full-name "scala.collection.generic.CanBuildFrom" :decl-as trait :type-args ((:name "WrappedString" :type-id 249 :full-name "scala.collection.immutable.WrappedString" :decl-as class) (:name "Tuple2" :type-id 530 :full-name "scala.Tuple2" :decl-as class :type-args ((:name "A1" :type-id 529 :full-name "scala.collection.A1") (:name "B" :type-id 527 :full-name "scala.collection.B"))) (:name "That" :type-id 531 :full-name "scala.collection.That"))))) :is-implicit t))) :decl-as method)))) (:type (:name "StringAdd" :type-id 539 :full-name "scala.runtime.StringAdd" :decl-as class :members ((:name "self" :type (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class) :decl-as field) (:name "+" :type (:name "(other: String)String" :type-id 537 :arrow-type t :result-type (:name "String" :type-id 51 :full-name "java.lang.String" :decl-as class) :param-sections ((:params (("other" (:name "String" :type-id 31 :full-name "java.lang.String" :decl-as class)))))) :decl-as method) (:name "<init>" :type (:name "(self: Any)scala.runtime.StringAdd" :type-id 538 :arrow-type t :result-type (:name "StringAdd" :type-id 539 :full-name "scala.runtime.StringAdd" :decl-as class) :param-sections ((:params (("self" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method))) :via-view "any2stringadd") (:type (:name "PartialFunction" :type-id 559 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "A" :type-id 557 :full-name "scala.A") (:name "B" :type-id 558 :full-name "scala.B")) :members ((:name "andThen" :type (:name "[C](k: Char => C)PartialFunction[Int,C]" :type-id 542 :arrow-type t :result-type (:name "PartialFunction" :type-id 543 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) (:name "C" :type-id 540 :full-name "scala.C"))) :param-sections ((:params (("k" (:name "Function1" :type-id 541 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "C" :type-id 540 :full-name "scala.C")))))))) :decl-as method) (:name "applyOrElse" :type (:name "[A1 <: Int, B1 >: Char](x: A1, default: A1 => B1)B1" :type-id 547 :arrow-type t :result-type (:name "B1" :type-id 545 :full-name "scala.B1") :param-sections ((:params (("x" (:name "A1" :type-id 544 :full-name "scala.A1")) ("default" (:name "Function1" :type-id 546 :full-name "scala.Function1" :decl-as trait :type-args ((:name "A1" :type-id 544 :full-name "scala.A1") (:name "B1" :type-id 545 :full-name "scala.B1")))))))) :decl-as method) (:name "lift" :type (:name "Function1" :type-id 548 :full-name "scala.Function1" :decl-as trait) :decl-as method) (:name "orElse" :type (:name "[A1 <: Int, B1 >: Char](that: PartialFunction[A1,B1])PartialFunction[A1,B1]" :type-id 552 :arrow-type t :result-type (:name "PartialFunction" :type-id 551 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "A1" :type-id 549 :full-name "scala.A1") (:name "B1" :type-id 550 :full-name "scala.B1"))) :param-sections ((:params (("that" (:name "PartialFunction" :type-id 551 :full-name "scala.PartialFunction" :decl-as trait :type-args ((:name "A1" :type-id 549 :full-name "scala.A1") (:name "B1" :type-id 550 :full-name "scala.B1")))))))) :decl-as method) (:name "runWith" :type (:name "[U](action: Char => U)Int => Boolean" :type-id 555 :arrow-type t :result-type (:name "Function1" :type-id 556 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Int" :type-id 2 :full-name "scala.Int" :decl-as class) (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class))) :param-sections ((:params (("action" (:name "Function1" :type-id 554 :full-name "scala.Function1" :decl-as trait :type-args ((:name "Char" :type-id 5 :full-name "scala.Char" :decl-as class) (:name "U" :type-id 553 :full-name "scala.U")))))))) :decl-as method))) :via-view "wrapString") (:type (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class :members ((:name "!=" :type (:name "(x$1: Any)Boolean" :type-id 560 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "==" :type (:name "(x$1: Any)Boolean" :type-id 561 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class) :param-sections ((:params (("x$1" (:name "Any" :type-id 34 :full-name "scala.Any" :decl-as class)))))) :decl-as method) (:name "asInstanceOf" :type (:name "[T0]=> T0" :type-id 562 :arrow-type t :result-type (:name "T0" :type-id 563 :full-name "scala.T0")) :decl-as method) (:name "isInstanceOf" :type (:name "[T0]=> Boolean" :type-id 564 :arrow-type t :result-type (:name "Boolean" :type-id 14 :full-name "scala.Boolean" :decl-as class)) :decl-as method))))))) 3)'

call vimtap#Is(s,out,'vimside#sexp#ToWireString(1)', 'type_at_point_string file ToWireString')

call vimtap#FlushOutput()
quit!
